

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_9 = Integer(9); _sage_const_2 = Integer(2); _sage_const_17 = Integer(17); _sage_const_7 = Integer(7); _sage_const_19 = Integer(19); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# We start with defining the unknowns as rational numbers
R = QQ['x, y, z']; (x, y, z,) = R._first_ngens(3)

# Let's define our homogeneous cubic equation
F = x**_sage_const_3  + y**_sage_const_3  + z**_sage_const_3  - _sage_const_9 *x**_sage_const_2 *(y+z) - _sage_const_9 *y**_sage_const_2 *(z+x) - _sage_const_9 *z**_sage_const_2 *(x+y) - _sage_const_17 *x*y*z
E = EllipticCurve_from_cubic(F, morphism=True)

"""
Scheme morphism:
  From: Projective Plane Curve over Rational Field defined by x^3 - 9*x^2*y - 9*x*y^2 + y^3 - 9*x^2*z - 17*x*y*z - 9*y^2*z - 9*x*z^2 - 9*y*z^2 + z^3
  To:   Elliptic Curve defined by y^2 + x*y = x^3 + 207*x^2 + 8775*x + 105625 over Rational Field
  Defn: Defined on coordinates by sending (x : y : z) to
        (-x - z : x : 12/325*x - 1/325*y + 12/325*z)
"""

# An integer solution for the original equation (it doesn't have to be all positive)
P = E([-_sage_const_7 , _sage_const_19 , _sage_const_9 ])
i = _sage_const_1  # i = 13 will be the correct number

while True:
    # We multiply a point and transform back to the original curve. 
    candidate = E.inverse()(P*i)

    # We check if the candidate only contains positive components.
    if all(j > _sage_const_0  for j in candidate):
        # transform (x/z, y/z, 1) into (x, y, z)
        (x, y, z) = (candidate[_sage_const_0 ].numerator(), candidate[_sage_const_1 ].numerator(), candidate[_sage_const_0 ].denominator())

        print("We've got the solutions!!")
        print(f"{x = }")
        print(f"{y = }")
        print(f"{z = }")

        break

    i += _sage_const_1 

